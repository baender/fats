frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "period",
yAxis = "energy",
spectrumLimits = 1)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "period",
yAxis = "energy",
spectrumLimits = 0.1)
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "period",
yAxis = "energy",
spectrumLimits = 1)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "period",
yAxis = "energy",
spectrumLimits = 1)
danubeGaps <- danube
danubeGaps$Discharge[seq(1, nrow(danube))[-seq(from = 1, to = nrow(danube), by = 2)]] <- 0
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "period",
yAxis = "energy",
spectrumLimits = 1)
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
danubeGaps <- danube
danubeGaps$Discharge[seq(1, nrow(danube))[-seq(from = 1, to = nrow(danube), by = 2)]] <- 0
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
danubeGaps$Discharge[seq(1, nrow(danube))[-seq(from = 1, to = nrow(danube), by = 4)]] <- 0
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 0.5)
filterCoefficients <- signal::fir1(n = 50, )
filterCoefficients <- signal::fir1(n = 50, w = 0.25, type = "low")
filterCoefficients
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency")
danubeGaps <- danube
danubeGaps$Discharge[seq(1, nrow(danube))[-seq(from = 1, to = nrow(danube), by = 3)]] <- 0
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 0.5)
filterCoefficients <- signal::fir1(n = 50, w = 0.25, type = "low")
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency")
filterCoefficients <- signal::fir1(n = 50, w = 0.30, type = "low")
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency")
filterCoefficients <- signal::fir1(n = 100, w = 0.30, type = "low")
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency")
danubeGaps$DischargeFiltered <- signal::filtfilt(filt = filterCoefficients, danubeGaps$Discharge)
head(danubeGaps)
frequencySpectrumGaps <- calculateSpectrum(timeSignal = danubeGaps$DischargeFiltered,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
plot(danubeGaps$Discharge[1000:2000], type = "l")
plot(danube$Discharge[1000:2000], type = "l")
plot(danubeGaps$DischargeFiltered[1000:2000], type = "l")
head(danubeGaps)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
danubeGaps <- danube
head(danube)
str(frequencySpe)
devtools::load_all("R")
frequencySpectrum <- calculateSpectrum(timeSignal = danube$Discharge,
timeStep = 1,
plotFlag = TRUE,
xAxis = "frequency",
yAxis = "amplitude",
spectrumLimits = 1)
str(frequencySpectrum)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
str(danbue)
str(danube)
spectrum <- createFrequencySpectrum(timeSeries = danube$Discharge, timeStep = 1)
spectrum <- createFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
spectrum <- createFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
spectrum <- createFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
str(spectrum)
head(spectrum)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- spectrum$amplitude
head(aaa)
length(aaa)
head(cumsum(aaa) / sum(aaa))
tail(cumsum(aaa) / sum(aaa))
tail(aaa)
aaa[(length(aaa)-1) / 2]
aaa[-5:5 + (length(aaa)-1) / 2, ]
-5:5 + (length(aaa)-1) / 2
aaa[(-5:5) + (length(aaa)-1) / 2, ]
aaa[(length(aaa)-1) / 2 + (-5:5), ]
aaa[(length(aaa)-1) / 2]
length(aaa)-1) / 2
(length(aaa)-1) / 2
aaa[5470:5479]
aaa[5470:5479, ]
aaa[5470:5479]
aaa[5470:5480]
aaa[5475:5485]
bbb = fft(danube$Discharge[1:128])
str(bbb)
bbb = Mod(fft(danube$Discharge[1:128]))
str(bbb)
bbb = 2 / 128 * Mod(fft(danube$Discharge[1:128]))
str(bbb)
tail(bbb)
head(aaa)
head(bbb)
bbb[60:70, ]
bbb[60:70]
128 %% 2
128 %% 2 == 0
125 %% 2 == 0
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
getMaxDynamic(danube$Discharge, 1, quantile = 0.99)
length(getMaxDynamic(danube$Discharge, 1, quantile = 0.99))
tail(getMaxDynamic(danube$Discharge, 1, quantile = 0.99))
danube$Discharge[5478:5479]
danube$Discharge[5477:5479]
danube$Discharge[5477:5481]
spectrum[5479:5480]
spectrum[5479:5480, ]
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- getMaxDynamic(danube$Discharge, 1, quantile = 0.99)
tail(aaa)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- getMaxDynamic(danube$Discharge, 1, quantile = 0.99)
tail(aaa)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- getMaxDynamic(danube$Discharge, 1, quantile = 0.99)
tail(aaa)
aaa <- getMaxDynamic(spectrum$amplitude, 1, quantile = 0.99)
tail(aaa)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
tail(getMaxDynamic(spectrum$amplitude, 1, quantile = 0.99))
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
head(aaa)
bbb <- aaa$amplitude
length(bbb)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
ccc <- getMaxDynamic(bbb, timeStep = 1)
head(ccc)
tail(ccc)
bbb[5478:5479]
bbb[5478:5480]
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
ccc <- getMaxDynamic(bbb, timeStep = 1)
ccc
bbb[5479:5480]
getMaxDynamic(amplitude = seq(64))
aaa <- calculateFrequencySpectrum(timeSignal = danube$Discharge[1:128], timeStep = 1)
bbb <- aaa$amplitude
length(bbb)
getMaxDynamic(amplitude = bbb, timeStep = 1)
bbb[64:66]
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
getMaxDynamic(amplitude = bbb, timeStep = 1)
getMaxDynamic(amplitude = bbb, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1)
str(qqq)
head(qqq)
tail(qqq)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1)
head(qqq)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1)
qqq
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.999)
qqq
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 1)
qqq
qqq <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.1)
qqq
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
aaa <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
bbb <- aaa$amplitude
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
ccc <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.99)
ccc
getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.99)
getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.999)
getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.5)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
ccc
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
ccc <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.999)
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
ccc <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.99)
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
ccc <- getMaxDynamic(amplitude = bbb, timeStep = 1, quantile = 0.90)
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/R/plotFilterResponse.R', echo=TRUE)
plotFilterResponse(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
library(magrittr)
plotFilterResponse(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
qqq <- plotFilterResponse(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- plotFilterResponse2(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- plotFilterResponse2(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
qqq <- plotFilterResponse2(signal::fir1(n = 30, w = 0.5, type = "low"), timeStep = 1, xAxis = "period")
getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = ccc, timeStep = 1)
qqq <- plotFilterResponse2(signal::fir1(n = 30, w = 1 / downsampleFactor, type = "low"), timeStep = 1, xAxis = "period")
qqq <- plotFilterResponse2(signal::butter(n = 30, W = 1 / downsampleFactor, type = "low"), timeStep = 1, xAxis = "period")
qqq <- plotFilterResponse2(signal::butter(n = 30, W = 1 0.5, type = "low"), timeStep = 1, xAxis = "period")
qqq <- plotFilterResponse2(signal::butter(n = 30, W = 0.5, type = "low"), timeStep = 1, xAxis = "period")
downsampleFactor
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
frequencySpectrum <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
head(frequencySpectrum)
maxDynamic <- getMaxDynamic(amplitude = frequencySpectrum$amplitude, timeStep = 1, quantile = 0.99)
maxDynmaic
maxDynamic
getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
filterCoefficients <- signal::fir1(n = 30, w = 0.5, type = "low")
filterCoefficients
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1)
library(magrittr)
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
filterCoefficients <- signal::fir1(n = 30, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, spectrumLimits = 1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, yAxis = "energy", spectrumLimits = 1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, yAxis = "energy", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, yAxis = "energy", spectrumLimits = 0.25)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, yAxis = "energy", spectrumLimits = 0.1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, spectrumLimits = 1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, spectrumLimits = 0.5)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = frequencySpectrum, timeStep = 1, spectrumLimits = 0.5)
source("functions.R")
library(magrittr)
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
frequencySpectrum <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
head(frequencySpectrum)
source("functions.R")
library(magrittr)
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
frequencySpectrum <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
maxDynamic <- getMaxDynamic(amplitude = frequencySpectrum$amplitude, timeStep = 1, quantile = 0.99)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
library(signal)
filterCoefficients <- fir1(n = 30, w = 1 / downsampleFactor, type = "low")
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = filter(filt = filterCoefficients, x = danube$Discharge), timeStep = 1)
originalSpectrum <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = originalSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
maxDynamic <- getMaxDynamic(amplitude = originalSpectrum$amplitude, timeStep = 1, quantile = 0.99)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency", spectrumLimits = 0.5)
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = filter(filt = filterCoefficients, x = danube$Discharge), timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = originalSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
originalSpectrum <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = originalSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = filter(filt = filterCoefficients, x = danube$Discharge), timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
danubeFiltered <- data.frame(danube$Date, filter(filt = filterCoefficients, x = danube$Discharge))
head(danubeFiltered)
danubeFiltered <- data.frame(danube$Date, Discharge = filter(filt = filterCoefficients, x = danube$Discharge))
head(danubeFiltered)
tail(danubeFiltered)
filterCoefficients
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], type = "l", col = "r")
lines(danubeFiltered$Discharge[1:100], type = "l", col = "red")
danubeFiltered <- data.frame(danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = danubeFiltered, timeStep = 1)
danubeFiltered <- data.frame(danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
head(danubeFiltered)
head(danube)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], type = "l", col = "red")
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = filteredSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = originalSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plot(danube$Discharge, type = "l")
lines(danubeFiltered$Discharge, col = "red")
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalSpectrum$amplitude, timeStep = 1, quantile = 0.999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### define filter
filterCoefficients <- fir1(n = 30, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency", spectrumLimits = 0.5)
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredSpectrum, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalSpectrum$amplitude, timeStep = 1, quantile = 0.9999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### define filter
filterCoefficients <- fir1(n = 30, w = 1 / downsampleFactor, type = "low")
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredSpectrum <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency", spectrumLimits = 0.5)
source('D:/Projekte/FrequencyTransformation/fats/fillGap.R')
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.9999)
maxDynamic
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.99)
maxDynamic
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
downsampleFactor
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.9999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
downsampleFactor
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.99)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### define filter
filterCoefficients <- fir1(n = 30, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "frequency", spectrumLimits = 0.5)
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
plotFrequencySpectrum(frequencySpectrum = originalFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
### define filter
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
### define filter
filterCoefficients <- fir1(n = 50, w = 0.9 * 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
### define filter
filterCoefficients <- fir1(n = 50, w = 0.8 * 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
### define filter
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
danubeDownsampled <- danube[seq(from = 1, to = nrow(danube), by = downsampleFactor)]
danubeDownsampled <- danube[seq(from = 1, to = nrow(danube), by = downsampleFactor), ]
head(danubeDownsampled)
plot(danube$Discharge[1:100], type = "l")
lines(danubeFiltered$Discharge[1:100], col = "red")
lines(danubeDownsampled$Discharge[1:100], col = "green")
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], danube, type = "l")
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
lines(x = danubeDownsampled$Date[1:100], y = danubeDownsampled$Discharge[1:100], col = "green")
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
downsampleFactor
### design filter with cutoff frequency = maxDynamic
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
### apply digital filter
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
### downsampling of original
danubeDownsampled <- danube[seq(from = 1, to = nrow(danube), by = downsampleFactor), ]
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
lines(x = danubeDownsampled$Date[1:100], y = danubeDownsampled$Discharge[1:100], col = "green")
plotFrequencySpectrum(frequencySpectrum = originalFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
### design filter with cutoff frequency = maxDynamic
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "high")
### apply digital filter
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
plot(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], type = "l", col = "red")
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
lines(x = danubeDownsampled$Date[1:100], y = danubeDownsampled$Discharge[1:100], col = "green")
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### design filter with cutoff frequency = maxDynamic
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "low")
plotFilterResponse2(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
source('D:/Projekte/FrequencyTransformation/fats/functions.R')
source("functions.R")
library(signal)
library(magrittr)
danube <- read.table(file = "9602258.csv", header = TRUE, sep = ";", stringsAsFactors = FALSE)
names(danube) <- c("Date", "Discharge")
danube$Date <- as.Date(danube$Date)
originalFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danube$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = originalFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
### define downsampling factor by threshold of energy
maxDynamic <- getMaxDynamic(amplitude = originalFrequencyResponse$amplitude, timeStep = 1, quantile = 0.999)
downsampleFactor <- getMaxDownsamplingFactor(maxDynamic = maxDynamic, timeStep = 1)
### design filter with cutoff frequency = maxDynamic
filterCoefficients <- fir1(n = 50, w = 1 / downsampleFactor, type = "low")
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
### apply digital filter
danubeFiltered <- data.frame(Date = danube$Date, Discharge = filtfilt(filt = filterCoefficients, x = danube$Discharge))
filteredFrequencyResponse <- calculateFrequencySpectrum(timeSignal = danubeFiltered$Discharge, timeStep = 1)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
### downsampling of original
danubeDownsampled <- danube[seq(from = 1, to = nrow(danube), by = downsampleFactor), ]
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
lines(x = danubeDownsampled$Date[1:100], y = danubeDownsampled$Discharge[1:100], col = "green")
source('D:/Projekte/FrequencyTransformation/fats/fillGap.R')
plotFrequencySpectrum(frequencySpectrum = originalFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plotFilterResponse(filterCoefficients = filterCoefficients, timeStep = 1, xAxis = "period", spectrumLimits = 0.5)
plotFrequencySpectrum(frequencySpectrum = filteredFrequencyResponse, timeStep = 1, xAxis = "period", yAxis = "amplitude", spectrumLimits = 0.5)
plot(x = danube$Date[1:100], y = danube$Discharge[1:100], type = "l")
lines(x = danubeFiltered$Date[1:100], y = danubeFiltered$Discharge[1:100], col = "red")
lines(x = danubeDownsampled$Date[1:100], y = danubeDownsampled$Discharge[1:100], col = "green")
